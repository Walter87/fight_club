continue
@ranking.first.first_name
@ranking.first
ranking
ranking.name
ranking.first
@ranking
exit
continue
exit
defencer
attacker
Skill
attack
continue
attacker
attack
self.course
return nil if self.relation
self.relation
self.fighter
luckily
probability
fighters
opponent.hp
fighter.hp
opponent
fighter
continue
fight
figth
self.fighter
fight.fighter
opponent
fighter
sum_of_badges
continue
fighter.skills
$actual_skills
continue
winner
fighter.fight
fighter.fights
fight
fighter.skill_ids
fighter
fighter.fight
fight
continue
@actual_skills
continue
@actual_skills
continue
@actual_skills
fight.winner.skill_ids
fight.winner
winner
@actal_skills
exit
@actual_skills
continue
@actual_skills
exit
fighter.skill_ids
fighter
fighter.skill_ids
params
continue
params
fighter.skill_ids
continue
params
fighter.skill_ids
continue
params
fighter.skill_ids
exit
continue
fighter.skill_ids
fighter
exit
fighter.skill_ids
params_merged
continue
params_merged
fighter_params
fighter.skill_ids
fighter_params
params
params_merged
continue
fighter_params.merge(skill_ids:  fighter.skill_ids.map(&:to_s)+params[:fighter][:skill_ids])
fighter_params.merge(skill_ids:  fighter.skill_ids.to_s+params[:fighter][:skill_ids])
params.merge(fighter[:skill_ids]:  fighter.skill_ids.map(&:to_s)+params[:fighter][:skill_ids])
params.merge(fighter[:skill_ids]  fighter.skill_ids.map(&:to_s)+params[:fighter][:skill_ids])
params.merge(fighter.skill_ids:  fighter.skill_ids.map(&:to_s)+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids.map(&:to_s)+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids.inspect+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids.to_s+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids+params[:fighter][:skill_ids])
params[:fighter].merge(skill_ids:  fighter.skill_ids+params[:fighter])
params[:fighter]
params[:fighter].merge(skill_ids:  fighter.skill_ids)
params[:fighter]
params[fighter]
params
params.merge(fighter[:skill_ids] => fighter.skill_ids)
params.merge(fighter.skill_ids: fighter.skill_ids)
params.merge(skill_ids: fighter.skill_ids)
params.merge(fighter: fighter.skill_ids)
fighter.skill_ids = [3,4,5]
params.merge(fighter: fighter.skill_ids)
params.merge([:fighter][:skill_ids] => fighter.skill_ids)
params.merge(fighter.skill_ids: fighter.skill_ids)
params.merge(skill_ids: fighter.skill_ids)
params.merge([:fighter][:skill_ids] fighter.skill_ids)
params.merge(fighter.skill_ids: fighter.skill_ids)
params.merge(skill_ids: fighter.skill_ids)
params
continue
params[:fighter]
params[:skill_ids]
params
continue
exit
params[:fighter]
params[fighter]
params.first
params[:skill_ids]
params
params[skill_ids]
params
exit
fighters.detect {|fighter| fighter.hp <= 0}
fighters.detect {|fighter| fighter.hp < 0}
exit
fighters.detect {|fighter| fighter.hp < 0}
fighters.detect {|fighter| fighter.hp > 0}
exit
self.course
fight.course
fighters.detect {|fighter| fighter.hp < 0}
fighters.detect {|fighter| fighter.hp > 0}
fighters.detect {|fighter| fighter.hp < 0}
fighters.detect {|fighter| fighter.hp > 0}
luckily
probability
fighters
self.opponent
self.fighter
loser
winner
self.winner
exit
fighters[1].points / 2
fighters[1].points / 1
fighters[1].points /1
fighters[1].points
fighters[0].points / (fighters[1].points + fighters[0].points)
fighters[0].points
fighters[0]
probability
